<?xml version="1.0"?>
<doc>
    <assembly>
        <name>tagVisualizationTest</name>
    </assembly>
    <members>
        <member name="T:demoSoftware.Deck">
            <summary>
            
            </summary>
        </member>
        <member name="M:demoSoftware.Deck.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:demoSoftware.Deck.setDeck">
            <summary>
            
            </summary>
        </member>
        <member name="M:demoSoftware.Deck.getDeck">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:demoSoftware.Deck.getShuffledDeck">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:demoSoftware.Deck.toString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:demoSoftware.MainWindow">
            <summary>
            Interaction logic for SurfaceWindow1.xaml
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="M:demoSoftware.MainWindow.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:demoSoftware.MainWindow.OnClosed(System.EventArgs)">
            <summary>
            Occurs when the window is about to close. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:demoSoftware.MainWindow.AddWindowAvailabilityHandlers">
            <summary>
            Adds handlers for window availability events.
            </summary>
        </member>
        <member name="M:demoSoftware.MainWindow.RemoveWindowAvailabilityHandlers">
            <summary>
            Removes handlers for window availability events.
            </summary>
        </member>
        <member name="M:demoSoftware.MainWindow.OnWindowInteractive(System.Object,System.EventArgs)">
            <summary>
            This is called when the user can interact with the application's window.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:demoSoftware.MainWindow.OnWindowNoninteractive(System.Object,System.EventArgs)">
            <summary>
            This is called when the user can see but not interact with the application's window.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:demoSoftware.MainWindow.OnWindowUnavailable(System.Object,System.EventArgs)">
            <summary>
            This is called when the application's window is not visible or interactive.
            </summary>
            <param name="sender">object sender</param>
            <param name="e">Event Arguments</param>
        </member>
        <member name="M:demoSoftware.MainWindow.OnVisualizationAdded(System.Object,Microsoft.Surface.Presentation.Controls.TagVisualizerEventArgs)">
            <summary>
            This function recognises tag, and gets relative x and y axis. It also gets orientation of the tag.
            </summary>
            <param name="sender">object sender</param>
            <param name="e">TagVisualizerEvent Arguments</param>
        </member>
        <member name="M:demoSoftware.MainWindow.constructBin(System.Collections.Generic.List{System.Windows.Input.TouchPoint})">
            <summary>
            
            </summary>
            <param name="tp"></param>
            <returns></returns>
        </member>
        <member name="M:demoSoftware.MainWindow.GetBytesFromBinaryString(System.String)">
            <summary>
            
            </summary>
            <param name="binary"></param>
            <returns></returns>
        </member>
        <member name="M:demoSoftware.MainWindow.drawboxes(System.Double,System.Double,System.Double)">
            <summary>
            draws boxes for recieving bits
            </summary>
            <param name="x1Axis">start of box X Axis</param>
            <param name="y1Axis">start of box Y Axis</param>
            <param name="angle">Orientation Angle</param>
        </member>
        <member name="M:demoSoftware.MainWindow.timer_Tick(System.Object,System.EventArgs)">
            <summary>
            Flashes binary bits
            </summary>
            <param name="sender">sender</param>
            <param name="e">event arguements</param>
        </member>
        <member name="M:demoSoftware.MainWindow.transferStringBuilder(System.String)">
            <summary>
            This method builds the transfer String with addition null characters between each transfer character.
            </summary>
            <param name="transferString">string to transfer</param>
            <returns>string including null characters in between</returns>
        </member>
        <member name="M:demoSoftware.MainWindow.ConvertToBinary(System.Char)">
            <summary>
            This method converts character to binary string
            </summary>
            <param name="asciiString">ascii character</param>
            <returns>binary string</returns>
        </member>
        <member name="M:demoSoftware.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:demoSoftware.Splash">
            <summary>
            Interaction logic for Splash.xaml
            </summary>
            <summary>
            Splash
            </summary>
        </member>
        <member name="M:demoSoftware.Splash.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:demoSoftware.Splash.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:TransferSystem.TransferManager">
            <summary>
            A class that holds the internal logic to the Lynx Transfer System for a PixelSense Table.
            </summary>
        </member>
        <member name="M:TransferSystem.TransferManager.#ctor(Microsoft.Surface.Presentation.Controls.TagVisualizer,System.Windows.Controls.Grid,System.Int32)">
            <summary>
            Primary Constructor for a TransferManager. Expected to work with one lynx
            </summary>
            <param name="tagger">used to initiate event handlers in TransferManager</param>
            <param name="FrameReporter">used to initiate event handlers in TransferManager</param>
            <param name="anticipatedLynx">the id of the lynx this TransferManager is intended to handle</param>
        </member>
        <member name="M:TransferSystem.TransferManager.addTagListener(Microsoft.Surface.Presentation.Controls.TagVisualizer)">
            <summary>
            Wrapper method to add appropriate eventhandlers to events
            </summary>
            <param name="tagger">the TagVisualizer object to listen to</param>
        </member>
        <member name="M:TransferSystem.TransferManager.addFrameReporter(System.Windows.Controls.Grid)">
            <summary>
            Wrapper method to add appropriate eventhandlers to events
            </summary>
            <param name="FrameReporter">The Grid to listen to</param>
        </member>
        <member name="P:TransferSystem.TransferManager.lynx">
            <summary>
            A logical representation of the Lynx device.
            </summary>
        </member>
        <member name="E:TransferSystem.TransferManager.ReceivedData">
            <summary>
            Fires upon successful interpretation of a complete piece of data
            </summary>
        </member>
        <member name="E:TransferSystem.TransferManager.ReceivedError">
            <summary>
            Fires upon the iterpretation of a complete piece of data, but the checksum fails
            </summary>
        </member>
        <member name="T:TransferSystem.TransferManager.ReceivedEventHandler">
            <summary>
            Delegate for methods to handle the ReceivedData event
            </summary>
            <param name="o">object that fired the event</param>
            <param name="Data">Custom Args class that supplies the data interpreted along with it's type</param>
        </member>
        <member name="T:TransferSystem.TransferManager.ReceivedErrorEventHandler">
            <summary>
            Delegate for methods t o handle ReceivedError event
            </summary>
            <param name="o">object that fired the event</param>
            <param name="error">Custom Args class that supplies the computed and received checksums</param>
        </member>
        <member name="T:demoSoftware.GameController">
            <summary>
            
            </summary>
        </member>
        <member name="M:demoSoftware.GameController.play">
            <summary>
            
            </summary>
            
        </member>
        <member name="M:demoSoftware.GameController.dealerHit">
            <summary>
            
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:demoSoftware.GameController.hit(demoSoftware.Player)">
            <summary>
            
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:demoSoftware.GameController.busted(demoSoftware.Player)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:demoSoftware.GameController.deal">
            <summary>
            deals the initial cards to the dealer and player
            </summary>
        </member>
        <member name="M:demoSoftware.GameController.getBet">
            <summary>
            asks user for bet
            </summary>
            <returns>result of the users bet amount</returns>
        </member>
        <member name="M:demoSoftware.GameController.hitOrStay">
            <summary>
            asks the user to hit or stay
            </summary>
            <returns>0 if stay, 1 if hit</returns>
        </member>
        <member name="M:demoSoftware.GameController.startPlaying">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:demoSoftware.GameController.gameOverState">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:demoSoftware.LynxTagVisualization">
            <summary>
            Interaction logic for TagVisualization1.xaml
            </summary>
            <summary>
            LynxTagVisualization
            </summary>
        </member>
        <member name="M:demoSoftware.LynxTagVisualization.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:demoSoftware.LynxTagVisualization.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:demoSoftware.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:demoSoftware.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:demoSoftware.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:demoSoftware.Card">
            <summary>
            
            </summary>
        </member>
        <member name="M:demoSoftware.Card.#ctor(System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="f"></param>
            <param name="s"></param>
        </member>
        <member name="M:demoSoftware.Card.getValue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:demoSoftware.Card.getFace">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:demoSoftware.Card.getSuit">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:demoSoftware.Card.setValue(System.Int32)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:demoSoftware.Card.setFace(System.String)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:demoSoftware.Card.setSuit(System.String)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:demoSoftware.Card.toString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:demoSoftware.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:demoSoftware.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:demoSoftware.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:demoSoftware.Player">
            <summary>
            
            </summary>
        </member>
        <member name="M:demoSoftware.Player.#ctor(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="wallet"></param>
            <param name="id"></param>
        </member>
        <member name="M:demoSoftware.Player.setWallet(System.Int32)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:demoSoftware.Player.setID(System.String)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:demoSoftware.Player.setScore(System.Int32)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:demoSoftware.Player.setHand(System.Collections.Generic.List{demoSoftware.Card})">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:demoSoftware.Player.getWallet">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:demoSoftware.Player.getID">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:demoSoftware.Player.getScore">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:demoSoftware.Player.getHand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:demoSoftware.Player.handString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:demoSoftware.Player.toString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
